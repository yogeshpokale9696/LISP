Assignment-4

Q.1
1.
	(if(> 3 4) "Yes" "No")

2.
	(if(listp '("Chicago" "Detroit" "toronto")) "it is a list" "it ain't a list")

3.
	(if(listp 99) "it is a list " "it ain't a list")

4.
	(member 'dallas '(boston san-francisco portland))

5.
	(member 'san-francisco '(boston san-francisco portland))

6.
	(= 1 1)

7.
	(= 10 (/ 20 2))

8.
	(/= 1 1)

9.
	(/= 1 2)

10.
	(/= 1 2 3)

11.
	(/= 1 2 3 1)


	(= 1 1.0)

12. 
	(/= 1 2 3 1.0)

13.
->	(setq a '(1 2 3))

->	(setq b '(1 2 3))

a)->	(eq 'a 'b)

b)->	(eq 'a 'a)

c)->	(eq 3 3)

d)->	(eq 3 3.0)

e)->	(eql 'a 'b)

f)->	(eql 'a 'a)

g)->	(eql 3 3)

h)->	(eql 3 3.0)

i)->	(eql 3.0 3.0)

j)->	(eql "Fun" "Fun")

k)->	(equal 'a 'b)

l)->	(equal 'a 'a)

m)->	(equal 3 3)

n)->	(equal 3 3.0)

o)->	(equal 3.0 3.0)

p)->	(equal "Fun" "Fun")

q)->	(equalp 'a 'b)

r)->	(equalp 'a 'a)

s)->	(equalp 3 3)

t)->	(equalp 3 3.0)

u)->	(equalp 3.0 3.0)

v)->	(equalp "Fun" "Fun")

w)->	(equalp "FUN" "fun")

14.
	(numberp 9)

15.
	(oddp 9)

16.
	(setq day 4)
	
	(case day 					 
	(1 'Monday)
	(2 'Tuesday)
	(3 'Wednesday)
	(4 'Thursday)
	(5 'Friday)
	(6 'Saturday)
	(7 'Sunday))

(case 1(1 (print("Monday"))))

(defun check(ch) (case ch (1 (+ 3 4))(2 (- 3 4))(3 (* 3 4))(4 (/ 3 4))))

17.
	(subseq '(a b c d) 1 3)

18. 
	(subseq '(a b c d) 1 2)

19. 
	(subseq '(a b c d) 1)

20. 
	(if (<= 3 2)(* 3 9)(+ 4 2 3))

21.
	(let ((x 3))    // x declared local
	(print x)
	(setf x 9) 		// The local x is set 
	(print x)
	(print "hello"))
22.
	(let ((x 3))(print x) (let (x) (print x)(let ((x "Hello"))(print x))(print x))(print x)(print "yo"))

23.
	(not nil)

24.
	(not t)

25.
	(setf pi 3.14)

	(and (listp pi)(setf result 'set-in-first-and))
	(and (number pi)(setf result 'ste-in-second-and))
	(or (listp pi)(setf result 'set-in-first-or))
	(or (number pi) (setf result 'ste-in-second-or))

	


Q.2 

1. Write IF forms that are equivalent to (ABS X), (MIN A B) and (MAX A B).

-->
	ABS->	(defun abss(x) (if(< x 0) (* -1 x)(x)))

	MIN-> (defun minn(x y) (if(< x y)x y))
	
	MAX-> (defun maxx(x y) (if(> x y)x y))

2. Compose COND forms that produce the same results as (NOT U), (OR X Y Z), and (AND A B C).

-->
	1. (not u) ->
	(defun nott(x) (cond ((equal x NIL))))

	2. (or x y z)
	//(defun orr(x y z) (cond ((equal x NIL) (cond ((equal y NIL) (cond 	((equal z NIL) NIL)(t 'T))(t 'T)))(t 'T))))
			OR
	//(let a 1 b 1 c 1) defun orr(x y z) (cond ((equal x NIL) (setf a NIL))	((equal y NIL) (setf b NIL))((equal z (setf c NIL)) NIL)))
			OR
	(defun orr(x y z) (if(equal x NIL) (if(equal y NIL) (if(equal z NIL) NIL T)T)T))

	3. (and a b s)
	--> (defun andd(x y z) (if(equal x NIL) NIL (if(equal y NIL) NIL (if(equal z NIL) T NIL))))
		OR
	--> (defun andd(x y z) (cond ((equal x NIL) NIL)((equal y NIL) NIL)((equal z NIL) NIL)(t 'T)))

3. Define CHECK-TEMPERATURE, a procedure that is to take one argument, such that it returns RIDICULOUSLY-HOT if the argument is greater than 100, it returns RIDICULOUSLY- COLD if the argument is less than 0, and it returns OK otherwise.
-->
	(defun tempcheck(x) (cond ((> x 100) 'RIDICULOUSLY-HOT) ((< x 0) 'RIDICULOUSLY-COLD)(t 'OK)))


4. Define USER-DEFINED-LIST to do what the primitive LIST does. Use a rest parameter
-->
	(defun listt(&rest ele) ele)
 	(listt 1 2 3 4 5)

5. Define USER-DEFINED-NTHCDR in terms of IF, ZEROP, -, and REST.
-->
	(DEFUN NNTHCDR(N L) (IF (ZEROP N) L ( NNTHCDR(- N 1)(REST L))))
	 -->(NNTHCDR 2 '(A B C C U ))


6. Define USER-DEFINED-LAST in terms of IF, ENDP, AND REST.
	(DEFUN LASTT(L) (IF(ENDP(REST L)) L (LASTT(REST L))))

	(LASTT '(A B C D E))


7. Write Lisp function to find prime nos from given list.
-->
	(DEFUN PRIMEE(N) (IF (> N 1)(LOOP FOR I FROM 2 TO (ISQRT N) NEVER (ZEROP(MOD N I)))))
(PRIMEE 3)

8. Write lisp function to compute m^n (eg. (power 3 4) o/p: 81)
-->
	(defun pow(a b) (if (= b 0) 1 (* a (pow a (- b 1)))))
	
	(pow 4 3)
	 (* 4 (pow a 1))

9. Write lisp function to keep first 'n' element from a list.
-->
	(DEFUN KEEP_FIRST ( N L) (IF (<= N 0) NIL (CONS (FIRST L)(KEEP_FIRST (- N 1) (REST L)))))

	(KEEP_FIRST 2 '( 2 3 5 6))

10. Write lisp function for implementing nthcdr (skip first n elements).
-->
	(DEFUN NTHCDR_NUM (N L) (IF (ZEROP N) L (NTHCDR_NUM (- N 1)(REST L))))

	(NTHCDR_NUM 3 '( T E J A S))

11. Write lisp function no-of-occur with 2 arguments: an element and a list, which returns the number of occurrence of a given element in a given list.
-->
	(DEFUN OCCUR_CNT(E L) (COUNT E L))

	(OCCUR_CNT 'S '(S H I V A ))
12. Define a LISP function to compute difference of squares.
-->
	(DEFUN DIFSQR(X Y) (-(* X X)(* Y Y)))

	(DIFSQR 2 3)

13. Write lisp program to calculate the sum of n numbers
	(DEFUN SUM_NUM(N) (LOOP FOR I FROM 1 TO N SUM I))
	
	(SUM_NUM 5)

14. Write lisp program to calculate the average of the list
-->
	(DEFUN AVG_SUM(L)(/(REDUCE '+ L)(LENGTH L)))
	
	 (AVG_SUM '(1 2 3 4 5))
	
15. Write lisp function to find maximum of 2 nos.
-->
	 (DEFUN MAX_NO(A B) (IF( > A B) '( A IS GREATER THAN B) '(B IS GREATER THAN A)))
	 
	(MAX_NO 3 2)

	

